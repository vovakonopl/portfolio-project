// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id
  firstName          String
  lastName           String
  username           String?
  email              String    @unique
  phoneNumbers       String[]
  additionalContacts Contact[]
  bio                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postedProducts    Product[]
  purchasedProducts Purchase[]
  comments          Comment[]
}

model Contact {
  id   String  @id @default(uuid())
  body String
  url  String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Product {
  // main info
  id                 String           @id @default(uuid())
  name               String
  description        String?
  additionalServices Service[]
  productVariants    ProductVariant[]

  // same discaunt for all product varriants if they exists
  totalDiscountProcent        Int?
  totalDiscountExpirationTime DateTime

  // if single product was posted
  priceInCents Int
  imagePaths   String[]
  purchases    Purchase[]
  comments     Comment[]

  // filters here: the list of filters for main product info
  // + the list of filters that occur in each product variant weill be merged
  filters Filter[]

  // stats
  rating        Int
  ratingNumber  Int
  remainRnStock Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // where it was posted
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
}

model ProductVariant {
  id                     String   @id @default(uuid())
  optionGroup            String // may be replaced with Int for optionGroupId or smth in feature for optimization
  optionName             String?
  priceInCents           Int
  discountPercent        Int?
  discountExpirationTime DateTime
  imagePaths             String[]

  purchases Purchase[]
  comments  Comment[]

  // filters here: if the item occurs in each variant - move it to main info filters
  filters Filter[]

  inStock     Int
  description String? // if null, it will use main product description

  mainProductId String
  mainProduct   Product @relation(fields: [mainProductId], references: [id], onDelete: Cascade)

  // only 1 same value per variant group
  @@unique([optionGroup, optionName])
}

model Service {
  id                     String   @id @default(uuid())
  name                   String
  priceInCents           Int
  discountProcent        Int?
  discountExpirationTime DateTime
  description            String?
  imagePath              String

  primaryProductId String
  primaryProduct   Product    @relation(fields: [primaryProductId], references: [id], onDelete: Cascade)
  Purchase         Purchase[]
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // what was purchased
  productId          String
  product            Product         @relation(fields: [productId], references: [id])
  productVariantId   String?
  ProductVariant     ProductVariant? @relation(fields: [productVariantId], references: [id])
  additionalServices Service[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  productId        String?
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productVariantId String?
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  replies Comment[] @relation("commentReplies")

  // if the comment is a reply to another comment, it will have these properties
  parentCommentId String?
  parentComment   Comment? @relation("commentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  subcategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  relatedCategoryName String
  relatedCategory     Category @relation(fields: [relatedCategoryName], references: [name], onDelete: Cascade)

  filters  Filter[]
  products Product[]

  @@unique([name, relatedCategoryName])
}

model Filter {
  id          String @id @default(uuid())
  option      String @unique
  filterGroup String

  ProductVariants ProductVariant[]
  products        Product[]
  belongsTo       SubCategory[]
}

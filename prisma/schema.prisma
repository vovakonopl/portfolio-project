// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id
  firstName          String
  lastName           String
  username           String?
  email              String    @unique
  phoneNumbers       String[]
  additionalContacts Contact[]
  bio                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postedProducts    Product[]
  purchasedProducts Purchase[]
  comments          Comment[]
}

model Contact {
  id   String  @id @default(uuid())
  body String
  url  String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Product {
  id                     String   @id @default(uuid())
  name                   String
  priceInCents           Int
  discount               Int?
  discountExpirationTime DateTime
  imagePaths             String[]
  description            String?
  rating                 Int
  ratingNumber           Int
  inStock                Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  additionalServices Service[]
  productVariants    ProductVariant[]
  purchases          Purchase[]
  comments           Comment[]
  filters            Filter[]

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
}

model ProductVariant {
  id           String @id @default(uuid())
  variantFor   String
  variantValue String

  name                   String
  priceInCents           Int
  discount               Int?
  discountExpirationTime DateTime
  imagePaths             String[]
  inStock                Int
  description            String? // if null, it will use main product description

  primaryProductId String
  primaryProduct   Product @relation(fields: [primaryProductId], references: [id], onDelete: Cascade)

  // only 1 same value per variant group
  @@unique([variantFor, variantValue])
}

model Service {
  id           String  @id @default(uuid())
  name         String
  imagePath    String
  priceInCents Int
  discount     Int?
  description  String?

  primaryProductId String
  primaryProduct   Product @relation(fields: [primaryProductId], references: [id], onDelete: Cascade)
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("commentReplies")

  // if the comment is a reply to another comment, it will have these properties
  parentCommentId String?
  parentComment   Comment? @relation("commentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  subcategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  relatedCategoryName String
  relatedCategory     Category @relation(fields: [relatedCategoryName], references: [name], onDelete: Cascade)

  filters  Filter[]
  products Product[]

  @@unique([name, relatedCategoryName])
}

model Filter {
  id          String @id @default(uuid())
  option      String @unique
  filterGroup String

  products  Product[]
  belongsTo SubCategory[]
}

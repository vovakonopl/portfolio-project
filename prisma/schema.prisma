// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id
  firstName          String
  lastName           String
  username           String?
  email              String    @unique
  phoneNumbers       String[]
  additionalContacts Contact[]
  bio                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postedProducts    Product[]
  purchasedProducts Purchase[]
  comments          Comment[]
}

model Contact {
  id   String  @id @default(uuid())
  body String
  url  String?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Product {
  id                 String            @id @default(uuid())
  name               String
  priceInCents       Int
  imagePaths         String[]
  description        String?
  secondaryOptions   SecondaryOption[]
  additionalServices Service[]

  optionGroup String?
  optionName  String?
  variants    ProductVariant[]

  // same discaunt for all product varriants if they exist
  totalDiscountProcent        Int?
  totalDiscountExpirationTime DateTime

  comments Comment[]
  filters  Filter[]

  // statistics
  rating        Int
  ratingNumber  Int
  remainInStock Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  // where it was posted
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  productId     String?
}

model ProductVariant {
  id            String   @id @default(uuid())
  name          String
  priceInCents  Int
  imagePaths    String[]
  description   String?
  remainInStock Int
  optionGroup   String
  optionName    String

  productId     String
  product       Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  Comment       Comment[]
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?
  Filter        Filter[]
}

model SecondaryOption {
  id           String  @id @default(uuid())
  name         String?
  priceInCents Int?
  optionGroup  String
  optionName   String

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Service {
  id                     String   @id @default(uuid())
  name                   String
  priceInCents           Int
  discountProcent        Int?
  discountExpirationTime DateTime
  description            String?
  imagePath              String

  relatedTo Product[]
}

model Purchase {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // the user who made the purchase
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // the product that was purchased
  purchasedItem            Json // can be a Product or a ProductVariant, stored as JSON
  selectedServices         Json // array of Service objects
  selectedSecondaryOptions Json // array of SecondaryOption objects
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  replies Comment[] @relation("commentReplies")

  // if the comment is a reply to another comment, it will have these properties
  parentCommentId  String?
  parentComment    Comment?        @relation("commentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  subcategories  SubCategory[]
  products       Product[]
  ProductVariant ProductVariant[]
}

model SubCategory {
  id   String @id @default(uuid())
  name String

  relatedCategoryName String
  relatedCategory     Category @relation(fields: [relatedCategoryName], references: [name], onDelete: Cascade)

  filters        Filter[]
  products       Product[]
  ProductVariant ProductVariant[]

  @@unique([name, relatedCategoryName])
}

model Filter {
  id          String @id @default(uuid())
  option      String @unique
  filterGroup String

  products         Product[]
  belongsTo        SubCategory[]
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId String?
}
